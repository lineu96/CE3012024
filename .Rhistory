for(i in 1:n_amostras) {
amostras[,i] <- sample(populacao,
size = tamanho_amostra,
replace = TRUE)
}
amostras <- as.data.frame(amostras)
dim(amostras)
## Calculando a média de cada amostra
medias <- colMeans(amostras)
medias
hist(medias,
col = 0,
probability = T,
xlab = 'Médias',
ylab = 'Densidade',
main = 'Distribuição amostral da média',
ylim = c(0, max(density(medias)$y) + 0.1*max(density(medias)$y)))
lines(density(medias), col = 1, lwd = 3)
legend(x = "topright",
lwd = c(3,3,3),
col= c(2,3,4),
legend=c("Mediana",
"Média",
"Quantis 5% e 95%"))
hist(medias,
col = 0,
probability = T,
xlab = 'Médias',
ylab = 'Densidade',
main = 'Distribuição amostral da média',
ylim = c(0, max(density(medias)$y) + 0.1*max(density(medias)$y)))
lines(density(medias), col = 1, lwd = 3)
legend(x = "topright",
lwd = c(3,3,3),
col= c(2,3,4),
legend=c("Mediana",
"Média",
"Quantis 5% e 95%"))
## Estimativas pontuais baseada na distribuição amostral
mean(medias)
median(medias)
## Uma estimativa intervalar baseada na distribuição amostral
quantile(medias, probs = c(0.05, 0.95))
## Adicionando quantidades no gráfico
### Mediana
abline(v = quantile(medias,
probs = 0.5),
col = 2, lwd = 5)
### Média
abline(v = mean(medias),
col = 3, lwd = 5)
### Quantis
abline(v = quantile(medias,
probs = c(0.05, 0.95)),
col = 4, lwd = 5)
### Valor real do parâmetro
abline(v = mean(populacao), col = 1, lwd = 5)
mean(populacao)
## Centrando a distribuição amostral na média de uma amostra
i=1
for (i in 1:100) {
Sys.sleep(0.3)
### Média e desvio padrão
media_amostra <- mean(amostras[,i])
dp_media_amostra <- sd(populacao)/sqrt(nrow(amostras))
### Gráfico
inferior <- media_amostra - dp_media_amostra
superior <- media_amostra + dp_media_amostra
x <- seq(-4, 4,
length = 1000) * dp_media_amostra + media_amostra
y <- dnorm(x, media_amostra, dp_media_amostra)
plot(x,y,
type = "l",
lwd = 2,
axes = FALSE,
xlab = "",
ylab = "",
main = paste0(i))
pontos_x <-
seq(-5 * dp_media_amostra + media_amostra,
5 * dp_media_amostra + media_amostra,
by = dp_media_amostra)
axis(side = 1, at = round(pontos_x, 1), pos = 0)
## Adicionando quantidades no gráfico
### Mediana
abline(v = qnorm(0.5, media_amostra,
dp_media_amostra),
col = 2, lwd = 5)
### Média amostral
abline(v = media_amostra,
col = 3, lwd = 5)
### Quantis
abline(v = qnorm(c(0.05, 0.95),
media_amostra,
dp_media_amostra),
col = 2, lwd = 5)
## Verdadeira média
abline(v = mean(populacao), col = 1, lwd = 5)
}
plot(0, type = 'n',
xlim = c(min(medias) - 4*sd(medias),
max(medias) + 4*sd(medias)),
ylim = c(0, (max(density(medias)$y) + 0.1*max(density(medias)$y))),
xlab = '',
ylab = '')
## Centrando a distribuição amostral na média de uma amostra
i=1
for (i in 1:100) {
Sys.sleep(0.3)
### Média e desvio padrão
media_amostra <- mean(amostras[,i])
dp_amostra <- sd(populacao)/sqrt(nrow(amostras))
### Gráfico
inferior <- media_amostra - dp_amostra
superior <- media_amostra + dp_amostra
x <- seq(-4, 4,
length = 1000) * dp_amostra + media_amostra
y <- dnorm(x, media_amostra, dp_amostra)
lines(x,y,
type = "l",
lwd = 2,
col = i)
## Verdadeira média
abline(v = mean(populacao), col = 1, lwd = 7)
}
### Média e desvio padrão VERDADEIROS
media_pop <- mean(populacao)
dp_media_pop <- sd(populacao)/sqrt(nrow(amostras))
### Gráfico
inferior <- media_pop - dp_media_pop
superior <- media_pop + dp_media_pop
x <- seq(-4, 4,
length = 1000) * dp_media_pop + media_pop
y <- dnorm(x, media_pop, dp_media_pop)
lines(x,y,
type = "l",
lwd = 10,
col = 1)
## Verdadeira média
abline(v = mean(populacao), col = 1, lwd = 10)
rnorm(10, 170,10)
round(rnorm(10, 170,10))
as.data.frame(round(rnorm(10, 170,10)))
rnorm(10, 170, 10)
round(rnorm(10, 170, 10))
alturas <- round(rnorm(10, 170, 10))
## Somatório
set.seed(1)
alturas <- round(rnorm(10, 170, 10))
soma_alturas <- sum(alturas)
media_alturas <- sum(alturas)/length(alturas)
## Somatório
set.seed(1)
alturas <- round(rnorm(10, 170, 10))
soma_alturas <- sum(alturas)
media_alturas <- sum(alturas)/length(alturas)
media_alturas
### Desvpad
(alturas - media_alturas)^2
### Desvpad
desvios <- (alturas - media_alturas)
desvios_quadraticos <- desvios^2
sum(desvios_quadraticos)
n <- 10
### Média
set.seed(1)
n <- 10
alturas <- round(rnorm(10, 170, 10))
alturas <- round(rnorm(n, 170, 10))
soma_alturas <- sum(alturas)
media_alturas <- sum(alturas)/length(alturas)
media_alturas
### Desvpad
desvios <- (alturas - media_alturas)
desvios_quadraticos <- desvios^2
sum(desvios_quadraticos)
sum(desvios_quadraticos)/(n-1)
var(alturas)
### Desvpad
desvios <- (alturas - media_alturas)
desvios_quadraticos <- desvios^2
soma_desvios_quadraticos <- sum(desvios_quadraticos)
soma_desvios_quadraticos/(n-1)
### Média
set.seed(1)
n <- 10
alturas <- round(rnorm(n, 170, 10))
soma_alturas <- sum(alturas)
media_alturas <- sum(alturas)/length(alturas)
media_alturas
mean(alturas)
### Desvpad
desvios <- (alturas - media_alturas)
desvios_quadraticos <- desvios^2
soma_desvios_quadraticos <- sum(desvios_quadraticos)
soma_desvios_quadraticos/(n-1)
plot(1, type = 'n', xaxt = 'n', yaxt = 'n', xlim = c(-1,7), ylim = c(0,0.3),
xlab = "Y", ylab = c("P(Y=y)"))
axis(1, at=c(0,2,4,6), labels=c(0,2,4,6))
axis(2, at=c(0.25, 0.2, 0.05), labels=c(0.25, 0.2, 0.05))
lines(x = c(0:2), y = rep(1/4,3), lwd = 2)
lines(x = c(2:4), y = rep(1/5,3), lwd = 2)
lines(x = c(4:6), y = rep(1/20,3), lwd = 2)
points(c(2,4), c(1/4,1/5), pch=1)
points(c(0,2,4), c(1/4,1/5,1/20), pch=19)
segments(c(0, 2, 4, 6), 0,
c(0, 2, 4, 6),
c(1/4, 1/4, 1/5, 1/20),
lty=3)
plot(1, type = 'n', xaxt = 'n', yaxt = 'n', xlim = c(-1,7), ylim = c(0,0.3),
xlab = "Y", ylab = c("P(Y=y)"))
axis(1, at=c(0,2,4,6), labels=c(0,2,4,6))
axis(2, at=c(0.25, 0.2, 0.05), labels=c(0.25, 0.2, 0.05))
lines(x = c(0:2), y = rep(1/4,3), lwd = 2)
lines(x = c(2:4), y = rep(1/5,3), lwd = 2)
lines(x = c(4:6), y = rep(1/20,3), lwd = 2)
points(c(2,4), c(1/4,1/5), pch=1)
points(c(0,2,4), c(1/4,1/5,1/20), pch=19)
segments(c(0, 2, 4, 6), 0,
c(0, 2, 4, 6),
c(1/4, 1/4, 1/5, 1/20),
lty=3)
2024-2002,
2024-2002
x1 <- c(4:8)
x2 <- c(8:10)
x3 <- c(10:11)
f1 <- (1/40) * x1
f2 <- -(1/20) * x2 + (3/5)
f3 <- rep((1/10), 2)
x <- c(x1, x2, x3)
ff <- c(f1, f2, f3)
plot(ff ~ x,
xlab = "x",
ylab = "f(x)",
type = 'l',
lwd=2,
ylim = c(0,0.2))
x1 <- c(4:8)
x2 <- c(8:10)
x3 <- c(10:11)
f1 <- (1/40) * x1
f2 <- -(1/20) * x2 + (3/5)
f3 <- rep((1/10), 2)
x <- c(x1, x2, x3)
ff <- c(f1, f2, f3)
plot(ff ~ x,
xlab = "x",
ylab = "f(x)",
type = 'l',
lwd=2,
ylim = c(0,0.2))
abline(v = 4, lty=2, lwd=0.5)
abline(v = 8, lty=2, lwd=0.5)
abline(v = 10, lty=2, lwd=0.5)
abline(v = 11, lty=2, lwd=0.5)
# Obtenha a área em cada parte da função.
(8-4)*0.1
((8-4)*(0.2-0.1))/2
((10-8)*(0.2-0.1))/2
(11-10)*0.1
# Obtenha a área em cada parte da função.
(8-4)*0.1
((8-4)*(0.2-0.1))/2
(10-8)*0.1
((10-8)*(0.2-0.1))/2
(11-10)*0.1
a1 <- (8-4)*0.1+
((8-4)*(0.2-0.1))/2
a2 <- (10-8)*0.1 +
((10-8)*(0.2-0.1))/2
a3 <- (11-10)*0.1
# Qual a área total abaixo da função?
a1+a2+a3
38/3
27/3
120/10
10*10
80/10
72.5-42+5
35.5/5
72.5-7.1
# populacao <- rnorm(30, 170,10)
quest <- read.csv("respostas-2024.csv")
populacao <- quest$Qual.o.seu.peso.
populacao <- populacao[(populacao > 0 & populacao <= 200)]
length(populacao)
hist(populacao,
xlab = 'Altura',
ylab = 'Frequência',
main = 'Histograma da população')
## Definindo algumas quantidades
n_amostras <- 100
tamanho_amostra <- 20
## Coletando diferentes amostras
amostras <- matrix(nrow = tamanho_amostra,
ncol = n_amostras)
for(i in 1:n_amostras) {
amostras[,i] <- sample(populacao,
size = tamanho_amostra,
replace = TRUE)
}
amostras <- as.data.frame(amostras)
dim(amostras)
## Calculando a média de cada amostra
medias <- colMeans(amostras)
hist(medias,
col = 0,
probability = T,
xlab = 'Médias',
ylab = 'Densidade',
main = 'Distribuição amostral da média',
ylim = c(0, max(density(medias)$y) + 0.2*max(density(medias)$y)))
lines(density(medias), col = 1, lwd = 3)
## Adicionando quantidades no gráfico
media <- mean(medias)
mediana <- median(medias)
ic <- quantile(medias, c(0.05, 0.95))
### Mediana
abline(v = mediana,
col = 2, lwd = 5)
### Média
abline(v = media,
col = 3, lwd = 5)
### Quantis
abline(v = ic,
col = 4, lwd = 5)
### Valor real do parâmetro
abline(v = mean(populacao), col = 1, lwd = 5)
legend(x = "topright",
lwd = c(3,3,3,3),
col= c(2,3,4,1),
legend=c("Mediana",
"Média",
"Quantis 5% e 95%",
"Valor verdadeiro"))
### Comparando os valores
t(data.frame(media = media,
mediana = mediana,
verdadeiro = mean(populacao)))
## Uma estimativa intervalar baseada na distribuição amostral
ic
contem <- c()
for (i in 1:100) {
Sys.sleep(0.3)
### Média e desvio padrão (populacional)
media_amostra <- mean(amostras[,i])
dp_populacao <- sd(populacao)/sqrt(nrow(amostras))
### Gráfico
inferior <- media_amostra - (3*dp_populacao)
superior <- media_amostra + (3*dp_populacao)
ic <- qnorm(c(0.05, 0.95),
media_amostra,
dp_populacao)
plot(media_amostra, 1,
ylim=range(c(0.5, 1.5)),
xlim=range(c(inferior, superior)),
pch=19,
cex=3,
xlab="Intervalo de confiança",
ylab="",
yaxt="n",
main=paste0("Intervalo com 90% confiança para a amostra ", i)
)
arrows(ic[1],
1,
ic[2],
1,
length=0.05,
angle=90,
code=3,
lwd = 8)
## Verdadeira média
points(x = mean(populacao), y=1, col = 2, pch = 19, cex = 3)
legend(x = "top",
pch = c(19,19),
col= c(1,2),
legend=c("Média amostral",
"Média populacional"))
contem[i] <-
mean(populacao) >= ic[1] &
mean(populacao) <= ic[2]
legend(x = "bottom",
#pch = c(19,19),
col= c(1,2),
legend=c(paste0('Contém: ', sum(contem)),
paste0('Não contém: ',sum(!contem))))
}
contem <- c()
for (i in 1:100) {
Sys.sleep(0.3)
### Média e desvio padrão
media_amostra <- mean(amostras[,i])
dp_populacao <- sd(populacao)/sqrt(nrow(amostras))
### Gráfico
inferior <- mean(sort(populacao)[1:tamanho_amostra])
superior <- mean(sort(populacao, decreasing = T)[1:tamanho_amostra])
ic <- qnorm(c(0.05, 0.95),
media_amostra,
dp_populacao)
plot(media_amostra, 1,
ylim=range(c(0.5, 1.5)),
xlim=range(c(inferior, superior)),
pch=19,
cex=3,
xlab="Intervalo de confiança",
ylab="",
yaxt="n",
main=paste0("Intervalo com 90% de confiança para a amostra ", i)
)
abline(v=mean(populacao), lwd = 5, col=2)
points(x = media_amostra, y=1, col = 1, pch = 19, cex = 3)
arrows(ic[1],
1,
ic[2],
1,
length=0.05,
angle=90,
code=3,
lwd = 8)
legend(x = "top",
pch = c(19,19),
col= c(1,2),
legend=c("Média amostral",
"Média populacional"))
contem[i] <-
mean(populacao) >= ic[1] &
mean(populacao) <= ic[2]
legend(x = "bottom",
#pch = c(19,19),
col= c(1,2),
legend=c(paste0('Contém: ', sum(contem)),
paste0('Não contém: ',sum(!contem))))
}
contem <- c()
dp_populacao <- sd(populacao)/sqrt(nrow(amostras))
inferior <- mean(populacao) - (10*dp_populacao)
superior <- mean(populacao) + (5*dp_populacao)
plot(1:100,
rep(mean(populacao),100),
xlim=c(1,100),
ylim=c(inferior, superior),
type = 'l',
lwd = 5,
xlab="Intervalo de confiança",
ylab="",
xaxt="n",
main=paste0("Intervalos com 90% de confiança")
)
for (i in 1:100) {
Sys.sleep(0.3)
### Média e desvio padrão
media_amostra <- mean(amostras[,i])
dp_populacao <- sd(populacao)/sqrt(nrow(amostras))
ic <- qnorm(c(0.05, 0.95),
media_amostra,
dp_populacao)
contem[i] <-
mean(populacao) >= ic[1] &
mean(populacao) <= ic[2]
arrows(i,
ic[1],
i,
ic[2],
length=0.05,
angle=90,
code=3,
lwd = ifelse(contem[i] == T, 1,3),
col = ifelse(contem[i] == T, 1,2))
legend(x = "bottom",
#pch = c(NA,19),
lty = c(1,NA,NA,NA),
lwd = c(5,NA,NA,NA),
col= c(1,NA,1,2),
legend=c("Média populacional",
NA,
paste0('Contém: ', sum(contem)),
paste0('Não contém: ',sum(!contem))))
}
plot(0, type = 'n',
xlim = c(min(medias) - 4*sd(medias),
max(medias) + 4*sd(medias)),
ylim = c(0, (max(density(medias)$y) + 0.15*max(density(medias)$y))),
xlab = '',
ylab = '',
main = 'Comparação distribuição amostral baseada no TLC x distribuição amostral construída')
### Gráfico
inferior <- mean(medias) - dp_populacao
superior <- mean(medias) + dp_populacao
x <- seq(-4, 4,
length = 1000) * dp_populacao + mean(medias)
y <- dnorm(x, mean(medias), dp_populacao)
lines(x,y,
type = "l",
lwd = 10,
col = 1)
lines(density(medias), col = 2	, lwd = 10)
legend(x = "topright",
#pch = c(NA,19),
lty = c(1,1),
lwd = c(5,5),
col= c(1,2),
legend=c("Dist. amostral TLC",
"Dis. amostral empírica"))
setwd("~/CE3012024")
rmarkdown::render_site()
100-32
mean(c(4700,
5300,
6000,
7300,
7400))
