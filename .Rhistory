y=value,
fill=group)) +
geom_area()
# Packages
library(ggplot2)
library(dplyr)
# create data
time <- as.numeric(rep(seq(1,5),each=5))  # x Axis
value <- runif(25, 0, 0.1)               # y Axis
group <- rep(LETTERS[1:5],times=5)        # group, one shape per group
data <- data.frame(time, value, group)
# stacked area chart
ggplot(data, aes(x=time,
y=value,
fill=group)) +
geom_area()
# Packages
library(ggplot2)
library(dplyr)
# create data
time <- as.numeric(rep(seq(1,5),each=5))  # x Axis
value <- runif(25, 0, 0.1)               # y Axis
group <- rep(LETTERS[1:5],times=5)        # group, one shape per group
data <- data.frame(time, value, group)
# stacked area chart
ggplot(data, aes(x=time,
y=value,
fill=group)) +
geom_area()
# Packages
library(ggplot2)
library(dplyr)
# create data
time <- as.numeric(rep(seq(1,5),each=5))  # x Axis
value <- runif(25, 0, 0.1)               # y Axis
group <- rep(LETTERS[1:5],times=5)        # group, one shape per group
data <- data.frame(time, value, group)
# stacked area chart
ggplot(data, aes(x=time,
y=value,
fill=group)) +
geom_area()
# stacked area chart
ggplot(data, aes(x=time,
y=value,
fill=group)) +
geom_area(col = 1)
# stacked area chart
ggplot(data, aes(x=time,
y=value,
fill=group)) +
geom_area(col = 1,
alpha = 0.2)
# stacked area chart
ggplot(data, aes(x=time,
y=value,
fill=group)) +
geom_area(col = 2,
alpha = 0.2)
# stacked area chart
ggplot(data, aes(x=time,
y=value,
fill=group)) +
geom_area(col = 1,
alpha = 0.4)
# stacked area chart
ggplot(data, aes(x=time,
y=value,
fill=group)) +
geom_area(col = 1,
alpha = 0.4) + theme_minimal()
# stacked area chart
ggplot(data, aes(x=time,
y=value,
fill=group)) +
geom_area(col = 1,
alpha = 0.4) + theme_void()
# stacked area chart
ggplot(data, aes(x=time,
y=value,
fill=group)) +
geom_area(col = 1,
alpha = 0.4)
0.4*70
1/5
(1/5)*70
1/5
10*0.1375
10*0.1875
10*0.125
10*0.1125
10*0.4375
sum(
c(
10*0.1375,
10*0.1875,
10*0.125,
10*0.1125,
10*0.4375,))
sum(
c(
10*0.1375,
10*0.1875,
10*0.125,
10*0.1125,
10*0.4375))
sum(
c(
10*0.1375,
10*0.1875,
10*0.125,
10*0.1125,
10*0.4375,))
sum(
c(
10*0.1375,
10*0.1875,
10*0.125,
10*0.1125,
10*0.4375))
sum(
c(
1*0.1375,
1*0.1875,
1*0.125,
1*0.1125,
10*0.4375))
sum(
c(
1*0.1375,
1*0.1875,
1*0.125,
1*0.1125,
6*0.4375))
sum(
c(
2*0.1375,
2*0.1875,
2*0.125,
2*0.1125,
6*0.4375))
sum(
c(
5*0.1375,
5*0.1875,
5*0.125,
5*0.1125,
6*0.4375))
sum(
c(
5*0.1375,
5*0.1875,
5*0.125,
5*0.1125,
8*0.4375))
sum(
c(
3*0.1375,
5*0.1875,
3*0.125,
3*0.1125,
8*0.4375))
dbinom(1, 70, 1/5)
70*(1/5)
dbinom(14, 70, 1/5)
dbinom(0:70, 70, 1/5)
round(dbinom(0:70, 70, 1/5))
round(dbinom(0:70, 70, 1/5), 4)
dist <-
data.frame(Y = 0:70,
p = round(dbinom(0:70, 70, 1/5), 4))
plot(p~Y, dist)
plot(p~Y, dist, type = 'l')
plot(p~Y, dist, type = 'h')
dist
210/5
(210/5)*2
210+84
7210/5
7*210
1470/5
2024-2001
2019-1996
2018-1996
3.7-2.56
sqrt(1.14)
a <- rpois(5,5)
b <- rpois(5,5)
a
b
scale(a)
scale(b)
scale(a)*scale(b)
mean(scale(a)*scale(b))
cor(a,b)
v <- c(20.2, 24.2, 26.3, 20.4,
24.7, 26.6, 20.4, 24.9,
27.0, 20.7, 25.0, 27.0,
21.3, 25.1, 27.4, 23.3,
25.2, 27.4, 23.4, 25.9,
27.7, 23.8, 26.1, 27.9,
23.8, 26.2, 28.2, 24.0,
26.2, 30.7)
cut(v)
?cut(v, breaks = )
min(v)
max(v)
cut(v, breaks = 2.143)
table(cut(v, breaks = 2.143))
seq(20, 35, 2.143)
table(cut(v, breaks = seq(20, 35, 2.143)))
barplot(table(cut(v, breaks = seq(20, 35, 2.143))), space = 0)
table(cut(v, breaks = seq(20, 35, 2.143))
)
table(cut(v, breaks = seq(20, 35, 3.75)))
table(cut(v, breaks = seq(20, 35, 3)))
table(cut(v, breaks = seq(20, 35, 2.5)))
table(cut(v, breaks = seq(20, 35, 2.143)))
table(cut(v, breaks = seq(20, 35, 1.875)))
rnorm(10,40,2)
x <- rnorm(10,40,2)
sd(x)
sd(x)/mean(x)
40/2
sd(x)
40/2
sd(x)
x <- rnorm(10,2,40)
40/2
sd(x)/mean(x)
x <- rnorm(100,2,40)
sd(x)/mean(x)
x <- rnorm(100,2,40)
sd(x)/mean(x)
x <- rnorm(10000,2,40)
sd(x)/mean(x)
x <- rnorm(10000,2,40)
sd(x)/mean(x)
x <- rnorm(10000,2,40)
sd(x)/mean(x)
x <- rnorm(10000,2,40)
sd(x)/mean(x)
2/1
2/1
2/0.5
2/4
2/5
2/8
2/9
2/10
x <- rnorm(10000,10,2)
sd(x)/mean(x)
cv <- sd(x)/mean(x)
x+(x*0.1)
xp <- x+(x*0.1)
x <- rnorm(10000,10,2)
cv1 <- sd(x)/mean(x)
xp <- x+(x*0.1)
cv2 <- sd(xp)/mean(xp)
cv1
cv2
cv1
cv2
setwd("~/CE3012024")
rmarkdown::render_site()
posicao <- function(vetor){
table <- data.frame(n = sum(!is.na(vetor)),
Minimo = quantile(vetor, na.rm = T)[1],
Quartil_1 = quantile(vetor, na.rm = T)[2],
Media = mean(vetor, na.rm = T),
Mediana = quantile(vetor, na.rm = T)[3],
Quartil_3 = quantile(vetor, na.rm = T)[4],
Maximo = quantile(vetor, na.rm = T)[5])
row.names(table) <- NULL
names(table) <- c('n', 'Mínimo', 'Q1', 'Média', 'Mediana', 'Q3', 'Máximo')
table
}
dispersao <- function(vetor){
table <- data.frame(Amplitude = diff(range(vetor, na.rm = T)),
Variancia = var(vetor, na.rm = T),
Desvio_padrao = sd(vetor, na.rm = T)#,
#Coef_variacao = 100*sd(vetor)/mean(vetor)
)
names(table) <- c('Amplitude', 'Variância', 'Desvio padrão')
table
}
notas <- readxl::read_xls('notas-chamada.xls')
notas$`MÉDIA REMOTAS` <- rowSums(notas[,c('REMOTA 1', 'REMOTA 2',
'REMOTA 3', 'REMOTA 4')]) /4
notas
rowSums(notas[,c('REMOTA 1', 'REMOTA 2',
'REMOTA 3', 'REMOTA 4')])
summary(notas)
names(notas)
names(notas)[3:10]
notas$`REMOTA 5`
notas$`PROVA 1` <- as.numeric(notas$`PROVA 1`)
DT::datatable(notas[,c('GRR',
'FALTAS'#,
#'PROVA 1',
#'PROVA 2',
#'PROVA 3',
'REMOTA 1'#,
notas <- readxl::read_xls('notas-chamada.xls')
notas$`PROVA 1` <- as.numeric(notas$`PROVA 1`)
notas$`PROVA 2` <- as.numeric(notas$`PROVA 2`)
notas$`PROVA 3` <- as.numeric(notas$`PROVA 3`)
notas$`PROVA 4` <- as.numeric(notas$`PROVA 4`)
notas$`REMOTA 1` <- as.numeric(notas$`REMOTA 1`)
notas$`REMOTA 2` <- as.numeric(notas$`REMOTA 2`)
notas$`REMOTA 3` <- as.numeric(notas$`REMOTA 3`)
notas$`REMOTA 4` <- as.numeric(notas$`REMOTA 4`)
notas$`REMOTA 5` <- as.numeric(notas$`REMOTA 5`)
notas$`MÉDIA REMOTAS` <- rowSums(notas[,c('REMOTA 1', 'REMOTA 2',
'REMOTA 3', 'REMOTA 4',
'REMOTA 5')]) /5
soma_parciais <- rowSums(notas[,c('PROVA 1', 'PROVA 2',
'PROVA 3', 'PROVA 4',
'MÉDIA REMOTAS')],
na.rm = T)
menor_parcial <- pmin(
ifelse(
is.na(notas$`PROVA 1`),0, notas$`PROVA 1`),
ifelse(is.na(notas$`PROVA 2`),0, notas$`PROVA 2`),
ifelse(is.na(notas$`PROVA 3`),0, notas$`PROVA 3`),
ifelse(is.na(notas$`PROVA 3`),0, notas$`PROVA 4`),
notas$`MÉDIA REMOTAS`,
na.rm = T)
pre_exame <- round((soma_parciais-menor_parcial)/4, 1)
notas$`NOTAS PRÉ EXAME` <- pre_exame
notas$`SITUAÇÃO PRÉ EXAME` <-
ifelse(notas$`NOTAS PRÉ EXAME` >= 7,
"APROVADO",
ifelse(notas$`NOTAS PRÉ EXAME` < 4 | notas$FALTAS > 15,
"REPROVADO",
"EXAME"))
notas$`NOTAS FINAIS` <-
ifelse(notas$`SITUAÇÃO PRÉ EXAME` == 'EXAME',
ifelse(is.na(notas$EXAME),
notas$`NOTAS PRÉ EXAME`/2,
round((notas$`NOTAS PRÉ EXAME`+ notas$EXAME)/2, 2)),
notas$`NOTAS PRÉ EXAME`)
notas$`SITUAÇÃO FINAL` <-
ifelse(notas$`NOTAS FINAIS` >= 5,
"APROVADO",
"REPROVADO")
DT::datatable(notas[,c('GRR',
'FALTAS',
#'PROVA 1',
#'PROVA 2',
#'PROVA 3',
'REMOTA 1'#,
#'REMOTA 2',
#'REMOTA 3',
#'REMOTA 4',
#"NOTAS PRÉ EXAME",
#"SITUAÇÃO PRÉ EXAME",
#"EXAME",
#"NOTAS FINAIS",
#"SITUAÇÃO FINAL"
)],
class = 'cell-border stripe',
rownames = F,
#filter = 'top',
editable = T
)
notas$`REMOTA 1`
notas <- readxl::read_xls('notas-chamada.xls')
notas$`REMOTA 1`
as.numeric(notas$`REMOTA 1`)
notas <- readxl::read_xls('notas-chamada.xls')
notas$`REMOTA 1`
as.numeric(notas$`REMOTA 1`)
rmarkdown::render_site()
notas$FALTAS
notas <- readxl::read_xls('notas-chamada.xls')
notas$FALTAS
notas <- readxl::read_xls('notas-chamada.xls')
notas$FALTAS
rmarkdown::render_site()
source("./config/setup.R")
source("./config/setup.R")
tabela4 <- prop.table(tabela)
---
title: \textbf{Análise exploratória}
tabela4 <- prop.table(tabela)
milsa <- read.csv("milsa.csv")
tabela <- table(milsa$estado_civil,
milsa$regiao)
tabela1 <- addmargins(tabela)
colnames(tabela1)[ncol(tabela1)] <- "Total"
row.names(tabela1)[nrow(tabela1)] <- "Total"
knitr::kable(round(tabela1, 2),
caption = "Tabela de dupla entrada usando frequências absolutas.",
align ="ccc" )
tabela4 <- prop.table(tabela)
tabela4 <- addmargins(tabela4)
tabela4
colnames(tabela4)[ncol(tabela4)] <- "Total"
row.names(tabela4)[nrow(tabela4)] <- "Total"
tabela4
tabela[3,]
tabela
tabela1[3,]
tabela1[3,]/nrow(milsa)
tabela4[3,] <- tabela1[3,]/nrow(milsa)
knitr::kable(round(tabela4, 2),
caption = "Tabela de dupla entrada usando frequências relativas.",
align ="ccc" )
tabela4 <- prop.table(tabela)
tabela4 <- addmargins(tabela4)
colnames(tabela4)[ncol(tabela4)] <- "Total"
row.names(tabela4)[nrow(tabela4)] <- "Total"
knitr::kable(round(tabela4, 2),
caption = "Tabela de dupla entrada usando frequências relativas.",
align ="ccc" )
tabela2 <- prop.table(tabela,
margin = 1)
tabela2 <- prop.table(tabela,
margin = 1)
tabela2 <- addmargins(tabela2)
colnames(tabela2)[ncol(tabela2)] <- "Total"
row.names(tabela2)[nrow(tabela2)] <- "Total"
knitr::kable(round(tabela2, 2),
caption = "Tabela de dupla entrada usando frequências relativas aos totais linha.",
align ="ccc" )
tabela2[3,] <- tabela1[3,]/nrow(milsa)
knitr::kable(round(tabela2, 2),
caption = "Tabela de dupla entrada usando frequências relativas aos totais linha.",
align ="ccc" )
tabela3 <- prop.table(tabela,
margin = 2)
tabela3 <- addmargins(tabela3)
colnames(tabela3)[ncol(tabela3)] <- "Total"
row.names(tabela3)[nrow(tabela3)] <- "Total"
knitr::kable(round(tabela3, 2),
caption = "Tabela de dupla entrada usando frequências relativas aos totais coluna.",
align ="ccc" )
tabela3 <- prop.table(tabela,
margin = 2)
tabela3 <- addmargins(tabela3)
colnames(tabela3)[ncol(tabela3)] <- "Total"
row.names(tabela3)[nrow(tabela3)] <- "Total"
tabela3[,4]
tabela1[,4]/nrow(milsa)
tabela3 <- prop.table(tabela,
margin = 2)
tabela3 <- addmargins(tabela3)
colnames(tabela3)[ncol(tabela3)] <- "Total"
row.names(tabela3)[nrow(tabela3)] <- "Total"
tabela3[,4]
tabela3 <- prop.table(tabela,
margin = 2)
tabela3 <- addmargins(tabela3)
colnames(tabela3)[ncol(tabela3)] <- "Total"
row.names(tabela3)[nrow(tabela3)] <- "Total"
tabela3
tabela2 <- prop.table(tabela,
margin = 1)
tabela2 <- addmargins(tabela2)
colnames(tabela2)[ncol(tabela2)] <- "Total"
row.names(tabela2)[nrow(tabela2)] <- "Total"
tabela2[3,] <- tabela1[3,]/nrow(milsa)
knitr::kable(round(tabela2, 2),
caption = "Tabela de dupla entrada usando frequências relativas aos totais linha.",
align ="ccc" )
knitr::kable(round(tabela2, 2),
caption = "Tabela de dupla entrada usando frequências relativas aos totais linha.",
align ="ccc" )
tabela3 <- prop.table(tabela,
margin = 2)
tabela3 <- addmargins(tabela3)
colnames(tabela3)[ncol(tabela3)] <- "Total"
row.names(tabela3)[nrow(tabela3)] <- "Total"
knitr::kable(round(tabela3, 2),
caption = "Tabela de dupla entrada usando frequências relativas aos totais coluna.",
align ="ccc" )
tabela3[,4]
tabela1
tabela1[,4]
tabela1[,4]/nrow(milsa)
table(milsa$regiao)
prop.table(table(milsa$regiao))
tabela3[,4]
tabela1[,4]/nrow(milsa)
tabela3[,4] <- tabela1[,4]/nrow(milsa)
knitr::kable(round(tabela3, 2),
caption = "Tabela de dupla entrada usando frequências relativas aos totais coluna.",
align ="ccc" )
prop.table(table(milsa$estado_civil))
1.96*0.8
1.96*0.4
0.6*1.96
9.176-6.316
0.3*0.8
0.24/0.45
0.3*0.7
0.21+0.24
dbinom(1, 4, 0.25)
3/4
4*0.25
0.75^3
3/4
1/4
3/4
27/64
1/3
4*1*27
4*64
108/256
57/3
57-3
